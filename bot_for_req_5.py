from aiogram import executor
from aiogram import Bot, Dispatcher
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import asyncio
import sqlite3


conn = sqlite3.connect('user_database5 .db')
cursor = conn.cursor()

cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY,
        userid TEXT NOT NULL
    )
''')


def insert_userid(userid):
    cursor.execute('INSERT INTO users (userid) VALUES (?)', (userid,))
    conn.commit()


def get_userids():
    cursor.execute('SELECT userid FROM users')
    return cursor.fetchall()


bot = Bot(token='6140136097:AAEAOAGlmMSowVdtAgtCUcaWF6lfpaYl9dA')
storage = MemoryStorage()
CHANNEL_ID = -1002035916230
dp = Dispatcher(bot, storage=storage)


class do(StatesGroup):
    msg = State()


@dp.chat_join_request_handler()
async def on_chat_join_request(update: types.ChatJoinRequest):
    await asyncio.sleep(5)
    await update.approve()
    await bot.send_message(update.from_user.id, f"<b>–í—ñ—Ç–∞—é, {update.from_user.full_name}!üå∏ –¢–≤–æ—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø —É Telegram –∫–∞–Ω–∞–ª —Å—Ö–≤–∞–ª–µ–Ω–∞! ‚ú®</b>\n\nüòä –ú–µ–Ω–µ –∑–≤—É—Ç—å –ö—Ä–∞–≤—á–µ–Ω–∫–æ –ê–Ω–Ω–∞, —ñ —è –±–∞—î—Ä –ø—Ä–æ–¥—É–∫—Ü—ñ—ó Dyson —Ç–∞ —ñ–Ω—à–æ—ó –±—å—é—Ç—ñ-—Ç–µ—Ö–Ω—ñ–∫–∏ –∑ –Ñ–≤—Ä–æ–ø–∏üá™üá∫\n–£ –º–æ—î–º—É —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª—ñ –∫–æ–∂–Ω–∞ —Å—É—á–∞—Å–Ω–∞ –∂—ñ–Ω–∫–∞ –∑–Ω–∞–π–¥–µ —â–æ—Å—å –æ—Å–æ–±–ª–∏–≤–µ –¥–ª—è —Å–µ–±–µ!\n\n<b>üõí –Ø —Ä–æ–±–ª—é –≤–∞—à–µ –∂–∏—Ç—Ç—è –±—ñ–ª—å—à –∫–æ–º—Ñ–æ—Ä—Ç–Ω–∏–º —Ç–∞ —Å—Ç–∏–ª—å–Ω–∏–º, –≤–∏–∫—É–ø–∞—é—á–∏ –Ω–∞–π–∫—Ä–∞—â—É —Ç–µ—Ö–Ω—ñ–∫—É Dyson –∑ –æ—Ñ—ñ—Ü—ñ–π–Ω–∏—Ö –º–∞–≥–∞–∑–∏–Ω—ñ–≤ —ñ–∑ —á–µ–∫–∞–º–∏ —Ç–∞ –≥–∞—Ä–∞–Ω—Ç—ñ—î—é –∑–∞ –Ω–∞–π–≤–∏–≥—ñ–¥–Ω—ñ—à–∏–º–∏ —Ü—ñ–Ω–∞–º–∏, –∞ —Ç–∞–∫–æ–∂ –∑ –Ω–∞–¥–∑–≤–∏—á–∞–π–Ω–æ —à–≤–∏–¥–∫–æ—é –¥–æ—Å—Ç–∞–≤–∫–æ—éüì¶</b>\n\nüéÅ –©–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ —Ç–∞ –∑–∞–º–æ–≤–∏—Ç–∏ –±–∞–∂–∞–Ω—É —Ç–µ—Ö–Ω—ñ–∫—É, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å –º–µ–Ω—ñ ¬´+¬ª –≤ –æ—Å–æ–±–∏—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –Ø –∑–∞–≤–∂–¥–∏ —Ä–∞–¥–∞ –¥–æ–ø–æ–º–æ–≥—Ç–∏ –≤–∞–º –æ–±—Ä–∞—Ç–∏ —ñ –ø—Ä–∏–¥–±–∞—Ç–∏ —ñ–¥–µ–∞–ª—å–Ω—ñ —Ä–µ—á—ñ –¥–ª—è –≤–∞—à–æ—ó –∫—Ä–∞—Å–∏!\n\n<b>üì≤ –î–ª—è –∑—Ä—É—á–Ω–æ–≥–æ –∑–¥—ñ–π—Å–Ω–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å —É –º—ñ–π Telegram: @dyson_bayer_kravchenko</b>", parse_mode='HTML')
    insert_userid(update.from_user.id)


@dp.message_handler(commands=['black_live_matter'])
async def welcome(message: types.Message):
    await do.msg.set()
    await bot.send_message(message.from_user.id, f'–í–≤–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–¥–æ –±—É–¥–µ—Ç —Ä–∞–∑–æ—Å–ª–∞—Ç—å:')


async def send_scheduled_message(user_id, message):
    await bot.send_message(user_id, message)


@dp.message_handler(state=do.msg)
async def input_symbol(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['msg'] = message.text
    for row in get_userids():
        await send_scheduled_message(user_id=row[0], message=data['msg'])
    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
    await state.finish()


scheduler = AsyncIOScheduler()

scheduler.start()


if __name__ == "__main__":
    print("ONLINE")
    executor.start_polling(dp, skip_updates=True)