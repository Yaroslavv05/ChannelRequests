from aiogram import executor
from aiogram import Bot, Dispatcher
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import asyncio
import sqlite3


conn = sqlite3.connect('user_database12.db')
cursor = conn.cursor()

cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY,
        userid TEXT NOT NULL
    )
''')


def insert_userid(userid):
    cursor.execute('INSERT INTO users (userid) VALUES (?)', (userid,))
    conn.commit()


def get_userids():
    cursor.execute('SELECT userid FROM users')
    return cursor.fetchall()


bot = Bot(token='6421326160:AAFDO7g4ns3jtJMWvWn_UbqpplMXD0GwGBY')
storage = MemoryStorage()
CHANNEL_ID = -1002159286207
dp = Dispatcher(bot, storage=storage)


class do(StatesGroup):
    msg = State()


@dp.chat_join_request_handler()
async def on_chat_join_request(update: types.ChatJoinRequest):
    await asyncio.sleep(5)
    await update.approve()
    await bot.send_message(
    update.from_user.id,
    f"<b>–í—ñ—Ç–∞—î–º–æ, {update.from_user.full_name}! ‚úåÔ∏è –í–∏ —â–æ–π–Ω–æ —Å—Ç–∞–ª–∏ —á–∞—Å—Ç–∏–Ω–æ—é –Ω–∞—à–æ—ó Telegram-—Å–ø—ñ–ª—å–Ω–æ—Ç–∏ –∑ –∞—Ä–±—ñ—Ç—Ä–∞–∂—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏! ‚úÖ</b>\n\nüòé –ú–µ–Ω–µ –∑–≤–∞—Ç–∏ –î–º–∏—Ç—Ä–æ –ì–æ—Ä–¥—ñ—î–Ω–∫–æ, —ñ —è —î –∑–∞—Å–Ω–æ–≤–Ω–∏–∫–æ–º —Ç–∞ –∫–µ—Ä—ñ–≤–Ω–∏–∫–æ–º –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–æ—ó –∫–æ–º–∞–Ω–¥–∏, –∞ —Ç–∞–∫–æ–∂ –∞–≤—Ç–æ—Ä–æ–º —Ü—å–æ–≥–æ —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ –∫–∞–Ω–∞–ª—É. –¢—É—Ç –º–∏ —Ä–æ–∑–∫—Ä–∏–≤–∞—î–º–æ —Å–µ–∫—Ä–µ—Ç–∏ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ –∞—Ä–±—ñ—Ç—Ä–∞–∂—É. –ù–∞ –Ω–∞—à–æ–º—É –∫–∞–Ω–∞–ª—ñ –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –¥–æ—Å—Ç—É–ø –¥–æ –Ω–∞–π—Å–≤—ñ–∂—ñ—à–∏—Ö —ñ–Ω—Å–∞–π–¥—ñ–≤, –≥–ª–∏–±–æ–∫–∏—Ö –∞–Ω–∞–ª—ñ—Ç–∏–∫ —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–∏—Ö —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π –¥–ª—è –º–∞–∫—Å–∏–º—ñ–∑–∞—Ü—ñ—ó –≤–∞—à–∏—Ö –ø—Ä–∏–±—É—Ç–∫—ñ–≤.\n\n<b>üìà –ê—Ä–±—ñ—Ç—Ä–∞–∂ –¥–ª—è –Ω–∞—Å ‚Äî —Ü–µ –±—ñ–ª—å—à–µ, –Ω—ñ–∂ –ø—Ä–æ—Å—Ç–æ –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è; —Ü–µ –Ω–∞–¥—ñ–π–Ω–∏–π —à–ª—è—Ö –¥–æ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–æ—ó —Å–≤–æ–±–æ–¥–∏. –ó–∞–ø—Ä–æ—à—É—î–º–æ –≤–∞—Å –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –Ω–∞—Å –Ω–∞ —É–º–æ–≤–∞—Ö —Å–ø—ñ–≤–ø—Ä–∞—Ü—ñ, —è–∫—ñ –ø—Ä–∏–Ω–æ—Å—è—Ç—å –∫–æ—Ä–∏—Å—Ç—å –æ–±–æ–º —Å—Ç–æ—Ä–æ–Ω–∞–º ‚Äì –º–∏ –∑–∞—Ä–æ–±–ª—è—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ç–æ–¥—ñ, –∫–æ–ª–∏ –≤–∏ –ø–æ—á–∏–Ω–∞—î—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Ä–µ–∞–ª—å–Ω–∏–π –¥–æ—Ö—ñ–¥! üí∏</b>\n\nüì© –Ø–∫—â–æ –≤–∏ –≥–æ—Ç–æ–≤—ñ –∑–∞–≥–ª–∏–±–∏—Ç–∏—Å—è –≤ —Å–≤—ñ—Ç –∞—Ä–±—ñ—Ç—Ä–∞–∂—É —Ç–∞ –±–∞–∂–∞—î—Ç–µ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ –ø—Ä–æ –Ω–∞—à—ñ –º–µ—Ç–æ–¥–∏ —Ç–∞ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ —Å–ø—ñ–≤–ø—Ä–∞—Ü—ñ, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ '+' —É –ø—Ä–∏–≤–∞—Ç–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.\n\n<b>üì≤ –î–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ –∑–∞–ª–∏—à–∞—é —Å–≤–æ—ó –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ –≤ Telegram: @gordienko_crypto</b>",
    parse_mode='HTML')   
    insert_userid(update.from_user.id)


@dp.message_handler(commands=['black_live_matter'])
async def welcome(message: types.Message):
    await do.msg.set()
    await bot.send_message(message.from_user.id, f'–í–≤–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–¥–æ –±—É–¥–µ—Ç —Ä–∞–∑–æ—Å–ª–∞—Ç—å:')


async def send_scheduled_message(user_id, message):
    await bot.send_message(user_id, message)


@dp.message_handler(state=do.msg)
async def input_symbol(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['msg'] = message.text
    for row in get_userids():
        await send_scheduled_message(user_id=row[0], message=data['msg'])
    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
    await state.finish()


scheduler = AsyncIOScheduler()

scheduler.start()


if __name__ == "__main__":
    print("ONLINE")
    executor.start_polling(dp, skip_updates=True)