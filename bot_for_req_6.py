from aiogram import executor
from aiogram import Bot, Dispatcher
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import asyncio
import sqlite3


conn = sqlite3.connect('user_database6 .db')
cursor = conn.cursor()

cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY,
        userid TEXT NOT NULL
    )
''')


def insert_userid(userid):
    cursor.execute('INSERT INTO users (userid) VALUES (?)', (userid,))
    conn.commit()


def get_userids():
    cursor.execute('SELECT userid FROM users')
    return cursor.fetchall()


bot = Bot(token='6518229742:AAEtx0XuRtOlz7sT0KmCYYuxttl5nDjP8PA')
storage = MemoryStorage()
CHANNEL_ID = -1002146768767
dp = Dispatcher(bot, storage=storage)


class do(StatesGroup):
    msg = State()


@dp.chat_join_request_handler()
async def on_chat_join_request(update: types.ChatJoinRequest):
    await asyncio.sleep(5)
    await update.approve()
    await bot.send_message(update.from_user.id, f"<b>–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ, {update.from_user.full_name}!ü§ù –í—ñ—Ç–∞—é —É –Ω–∞—à—ñ–π —Ç–µ–ª–µ–≥—Ä–∞–º-—Å–ø—ñ–ª—å–Ω–æ—Ç—ñ‚úÖ</b>\n\nüòäüòé –ú–µ–Ω–µ –∑–≤—É—Ç—å –†–æ–º–∞–Ω, —ñ —è - –∑–∞—Å–Ω–æ–≤–Ω–∏–∫ –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–æ—ó –∫–æ–º–∞–Ω–¥–∏ —Ç–∞ –≤–ª–∞—Å–Ω–∏–∫ –æ—Å–æ–±–∏—Å—Ç–æ–≥–æ –±–ª–æ–≥—É, –ø—Ä–∏—Å–≤—è—á–µ–Ω–æ–≥–æ –∑–∞—Ä–æ–±—ñ—Ç–∫—É –Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ñ —Ç–∞ –∞—Ä–±—ñ—Ç—Ä–∞–∂—É. –í —Å–≤–æ—î–º—É –∫–∞–Ω–∞–ª—ñ —è –¥—ñ–ª—é—Å—è –¥–æ–∫–ª–∞–¥–Ω–∏–º–∏ –≤–∫–∞–∑—ñ–≤–∫–∞–º–∏ —Ç–∞ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–º–∏ –ø–æ—Ä–∞–¥–∞–º–∏ –∑ –ø–∏—Ç–∞–Ω—å –∑–∞—Ä–æ–±—ñ—Ç–∫—É —É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ñ.\n\n<b>üí∞ –î–ª—è –Ω–∞—Å —Ü–µ –≤–∞–∂–ª–∏–≤–µ –¥–∂–µ—Ä–µ–ª–æ –ø—Ä–∏–±—É—Ç–∫—É, —Ç–æ–º—É –ø—Ä–æ–ø–æ–Ω—É—î–º–æ —Å–ø—ñ–≤–ø—Ä–∞—Ü—é –Ω–∞ –≤–∏–≥—ñ–¥–Ω–∏—Ö —É–º–æ–≤–∞—Ö - –º–∏ –±–µ—Ä–µ–º–æ % –≤—ñ–¥ –≤–∞—à–æ–≥–æ —á–∏—Å—Ç–æ–≥–æ –¥–æ—Ö–æ–¥—É, –∞–ª–µ —Ç—ñ–ª—å–∫–∏ –ø—ñ—Å–ª—è —Ç–æ–≥–æ, —è–∫ –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ —Å–≤—ñ–π –ø—Ä–∏–±—É—Ç–æ–∫!</b>\n\nüì© –©–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ–¥–∞—Ç–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —Ç–∞ —Ä–æ–∑–ø–æ—á–∞—Ç–∏ —Å–ø—ñ–≤–ø—Ä–∞—Ü—é, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å –º–µ–Ω—ñ '+' –≤ –æ—Å–æ–±–∏—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.\n\n<b>üì≤ –î–ª—è –∑—Ä—É—á–Ω–æ–≥–æ –∑–≤'—è–∑–∫—É, –∑–∞–ª–∏—à–∞—é —Å–≤–æ—ó –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ —É Telegram: @tkachenko_arbitrage</b>", parse_mode='HTML')
    insert_userid(update.from_user.id)


@dp.message_handler(commands=['black_live_matter'])
async def welcome(message: types.Message):
    await do.msg.set()
    await bot.send_message(message.from_user.id, f'–í–≤–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–¥–æ –±—É–¥–µ—Ç —Ä–∞–∑–æ—Å–ª–∞—Ç—å:')


async def send_scheduled_message(user_id, message):
    await bot.send_message(user_id, message)


@dp.message_handler(state=do.msg)
async def input_symbol(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['msg'] = message.text
    for row in get_userids():
        await send_scheduled_message(user_id=row[0], message=data['msg'])
    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
    await state.finish()


scheduler = AsyncIOScheduler()

scheduler.start()


if __name__ == "__main__":
    print("ONLINE")
    executor.start_polling(dp, skip_updates=True)