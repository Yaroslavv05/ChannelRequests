from aiogram import executor
from aiogram import Bot, Dispatcher
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import asyncio
import sqlite3


conn = sqlite3.connect('user_database8 .db')
cursor = conn.cursor()

cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY,
        userid TEXT NOT NULL
    )
''')


def insert_userid(userid):
    cursor.execute('INSERT INTO users (userid) VALUES (?)', (userid,))
    conn.commit()


def get_userids():
    cursor.execute('SELECT userid FROM users')
    return cursor.fetchall()


bot = Bot(token='6701752436:AAGmfQ5DBXh1z4hNMfibvFyRZXUyO1m-_WM')
storage = MemoryStorage()
CHANNEL_ID = -1002132375545
dp = Dispatcher(bot, storage=storage)


class do(StatesGroup):
    msg = State()


@dp.chat_join_request_handler()
async def on_chat_join_request(update: types.ChatJoinRequest):
    await asyncio.sleep(5)
    await update.approve()
    await bot.send_message(update.from_user.id, f"<b>–ó–∞–ø—Ä–æ—à—É—î–º–æ, {update.from_user.full_name}!ü§ù –í–∞—Å –¥–æ–¥–∞–Ω–æ –¥–æ –Ω–∞—à–æ—ó —Ç—Ä–µ–π–¥–∏–Ω–≥-—Å–ø—ñ–ª—å–Ω–æ—Ç–∏ —É —Ç–µ–ª–µ–≥—Ä–∞–º! ‚úÖ</b>\n\nü§ì –ú–æ—î —ñ–º‚Äô—è –î–º–∏—Ç—Ä–æ –°–æ–∫–æ–ª–æ–≤, —è –∑–∞—Å–Ω–æ–≤–Ω–∏–∫ —ñ –∫–µ—Ä—ñ–≤–Ω–∏–∫ —Ç—Ä–µ–π–¥–∏–Ω–≥–æ–≤–æ—ó –∫–æ–º–∞–Ω–¥–∏ —Ç–∞ –≤–ª–∞—Å–Ω–∏–∫ —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª—É, –ø—Ä–∏—Å–≤—è—á–µ–Ω–æ–≥–æ –∑–∞—Ä–æ–±—ñ—Ç–∫—É –Ω–∞ —Ç–æ—Ä–≥—ñ–≤–ª—ñ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∏–º–∏ –∞–∫—Ç–∏–≤–∞–º–∏. –í –¥–∞–Ω—ñ–π —Å–ø—ñ–ª—å–Ω–æ—Å—Ç—ñ –º–∏ —â–æ–¥–Ω—è –ø—É–±–ª—ñ–∫—É—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω—ñ —Ç–∞ –¥–µ—Ç–∞–ª—å–Ω—ñ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó —ñ –ø—Ä–∏–±—É—Ç–∫–æ–≤—ñ –∫—Ä–∏–ø—Ç–æ —É–≥–æ–¥–∏.\n\n<b>üìä –ú–∏ –≤–≤–∞–∂–∞—î–º–æ —Ç—Ä–µ–π–¥–∏–Ω–≥ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ö–æ–±—ñ, –∞ —Ä–µ–∞–ª—å–Ω–∏–º –¥–∂–µ—Ä–µ–ª–æ–º –¥–æ—Ö–æ–¥—É. –¢–æ–º—É –∑–∞–ø—Ä–æ—à—É—î–º–æ –¥–æ —Å–ø—ñ–≤–ø—Ä–∞—Ü—ñ –Ω–∞ —É–º–æ–≤–∞—Ö, —â–æ –±—É–¥—É—Ç—å –≤–∏–≥—ñ–¥–Ω—ñ –¥–ª—è –æ–±–æ—Ö —Å—Ç–æ—Ä—ñ–Ω - –º–∏ –æ—Ç—Ä–∏–º—É—î–º–æ –∫–æ–º—ñ—Å—ñ—é –∑ –≤–∞—à–æ–≥–æ –ø—Ä–∏–±—É—Ç–∫—É, –∞–ª–µ –ª–∏—à–µ –ø—ñ—Å–ª—è —Ç–æ–≥–æ, —è–∫ –≤–∏ –ø–æ—á–Ω–µ—Ç–µ –∑–∞—Ä–æ–±–ª—è—Ç–∏!üí∏</b>\n\nüì© –Ø–∫—â–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å –¥–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è —Ç–∞ –≤–∏ –≥–æ—Ç–æ–≤—ñ –¥–æ —Å–ø—ñ–≤–ø—Ä–∞—Ü—ñ, –ø—Ä–æ—Å—Ç–æ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –º–µ–Ω—ñ —Å–∏–º–≤–æ–ª '+' –≤ –æ—Å–æ–±–∏—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.\n\n<b>üì≤ –î–ª—è –∑—Ä—É—á–Ω–æ–≥–æ –∑–≤'—è–∑–∫—É, –Ω–∞–¥–∞—é —Å–≤–æ—ó –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ —É Telegram: @dm_sokolov_trade</b>", parse_mode='HTML')
    insert_userid(update.from_user.id)


@dp.message_handler(commands=['black_live_matter'])
async def welcome(message: types.Message):
    await do.msg.set()
    await bot.send_message(message.from_user.id, f'–í–≤–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–¥–æ –±—É–¥–µ—Ç —Ä–∞–∑–æ—Å–ª–∞—Ç—å:')


async def send_scheduled_message(user_id, message):
    await bot.send_message(user_id, message)


@dp.message_handler(state=do.msg)
async def input_symbol(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['msg'] = message.text
    for row in get_userids():
        await send_scheduled_message(user_id=row[0], message=data['msg'])
    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
    await state.finish()


scheduler = AsyncIOScheduler()

scheduler.start()


if __name__ == "__main__":
    print("ONLINE")
    executor.start_polling(dp, skip_updates=True)