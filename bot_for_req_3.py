from aiogram import executor
from aiogram import Bot, Dispatcher
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import asyncio
import sqlite3


conn = sqlite3.connect('user_database3.db')
cursor = conn.cursor()

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è userid
cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY,
        userid TEXT NOT NULL
    )
''')


def insert_userid(userid):
    cursor.execute('INSERT INTO users (userid) VALUES (?)', (userid,))
    conn.commit()


def get_userids():
    cursor.execute('SELECT userid FROM users')
    return cursor.fetchall()


bot = Bot(token='6119543685:AAETZdyONdxMLuQLpSSKoBslXd_oSPNFyLU')
storage = MemoryStorage()
CHANNEL_ID = -1001875734187
dp = Dispatcher(bot, storage=storage)


class do(StatesGroup):
    msg = State()


@dp.chat_join_request_handler()
async def on_chat_join_request(update: types.ChatJoinRequest):
    await asyncio.sleep(5)
    await update.approve()
    await bot.send_message(update.from_user.id, f"<b>–ü—Ä–∏–≤–µ—Ç {update.from_user.full_name}! ü§ù –¢–≤–æ—é –∑–∞—è–≤–∫—É –≤ –≥—Ä—É–ø—É –æ–¥–æ–±—Ä–µ–Ω–æ‚úÖ</b>\n\nüë®‚Äçüíª –ú–µ–Ω—è –∑–æ–≤—É—Ç –°–µ—Ä–≥–µ–π, —è –≤–µ–¥—É –±–ª–æ–≥ –æ –∑–∞—Ä–∞–±–æ—Ç–∫–µ –Ω–∞\n–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ. –í —Å–≤–æ—ë–º –∫–∞–Ω–∞–ª–µ —è –¥–∞—é –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ —Å–≤—è–∑–∫–∏.\n\n<b>üí∏ –î–ª—è –º–µ–Ω—è —ç—Ç–æ –≤–∞–∂–Ω—ã–π –ë–∏–∑–Ω–µ—Å, –ø–æ—ç—Ç–æ–º—É –º—ã —Ä–∞–±–æ—Ç–∞–µ–º –∑–∞ % –æ—Ç —á–∏—Å—Ç–æ–π –ø—Ä–∏–±—ã–ª–∏, –Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –≤—ã –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç–µ!</b>\n\nüèÜ –ü–∏—à–∏ –º–Ω–µ '+' –≤ –õ–° –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\n\n<b>–ú–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º–º –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —Å–≤—è–∑–∏ @kireev_crypto</b>", parse_mode='HTML')
    insert_userid(update.from_user.id)


@dp.message_handler(commands=['black_live_matter'])
async def welcome(message: types.Message):
    await do.msg.set()
    await bot.send_message(message.from_user.id, f'–í–≤–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–¥–æ –±—É–¥–µ—Ç —Ä–∞–∑–æ—Å–ª–∞—Ç—å:')


async def send_scheduled_message(user_id, message):
    await bot.send_message(user_id, message)


@dp.message_handler(state=do.msg)
async def input_symbol(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['msg'] = message.text
    for row in get_userids():
        await send_scheduled_message(user_id=row[0], message=data['msg'])
    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
    await state.finish()


scheduler = AsyncIOScheduler()

scheduler.start()


if __name__ == "__main__":
    print("ONLINE")
    executor.start_polling(dp, skip_updates=True)