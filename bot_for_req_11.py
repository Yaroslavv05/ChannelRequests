from aiogram import executor
from aiogram import Bot, Dispatcher
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import asyncio
import sqlite3


conn = sqlite3.connect('user_database11.db')
cursor = conn.cursor()

cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY,
        userid TEXT NOT NULL
    )
''')


def insert_userid(userid):
    cursor.execute('INSERT INTO users (userid) VALUES (?)', (userid,))
    conn.commit()


def get_userids():
    cursor.execute('SELECT userid FROM users')
    return cursor.fetchall()


bot = Bot(token='7483254621:AAGEWiE66RdV7cVFT97A8m-WbijJGMrU4HY')
storage = MemoryStorage()
CHANNEL_ID = -1002106924645
dp = Dispatcher(bot, storage=storage)


class do(StatesGroup):
    msg = State()


@dp.chat_join_request_handler()
async def on_chat_join_request(update: types.ChatJoinRequest):
    await asyncio.sleep(5)
    await update.approve()
    await bot.send_message(update.from_user.id, f"<b–í—ñ—Ç–∞—î–º–æ, {update.from_user.full_name}! üëã –í–∞—Å –¥–æ–¥–∞–Ω–æ –¥–æ telegram-–∫–∞–Ω–∞–ª—É –∑ –ø—Ä–æ–¥–∞–∂—É —Ç–µ—Ö–Ω—ñ–∫–∏ Apple!‚úÖ</b>\n\nüòé –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑—É—î—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–¥–∞–∂—ñ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –Ω–æ–≤–∏–Ω–æ–∫ —Ç–µ—Ö–Ω—ñ–∫–∏ Apple —Ç–∞ —ñ–Ω—à–∏—Ö –ø–æ–ø—É–ª—è—Ä–Ω–∏—Ö –±—Ä–µ–Ω–¥—ñ–≤. –£ –Ω–∞—à–æ–º—É –∫–∞–Ω–∞–ª—ñ –≤–∏ –∑–Ω–∞–π–¥–µ—Ç–µ –µ–∫—Å–∫–ª—é–∑–∏–≤–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó —Ç–∞ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω—ñ –ø–æ—Ä–∞–¥–∏ —â–æ–¥–æ –≤–∏–±–æ—Ä—É —ñ–¥–µ–∞–ª—å–Ω–∏—Ö –≥–∞–¥–∂–µ—Ç—ñ–≤.\n\n<b>üìã–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ –æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—å —ñ–∑ –∞–∫—Ç—É–∞–ª—å–Ω–∏–º –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–æ–º –¥–æ—Å—Ç—É–ø–Ω–æ—ó –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ç–µ—Ö–Ω—ñ–∫–∏ —Ç–∞ —É–º–æ–≤–∞–º–∏ –ø—Ä–∏–¥–±–∞–Ω–Ω—è –í–∏ –∑–º–æ–∂–µ—Ç–µ —É –Ω–∞—à–æ–º—É telegram-–∫–∞–Ω–∞–ª—ñ - https://t.me/+OxdUt6F95NQ3N2M8</b>\n\nüçè –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –≤–∂–µ –∑ –Ω–µ—Ç–µ—Ä–ø—ñ–Ω–Ω—è–º —á–µ–∫–∞—î –Ω–∞ –≤–∞—à—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ç–∞ –≥–æ—Ç–æ–≤–∞ –Ω–∞–¥–∞—Ç–∏ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω—É –¥–æ–ø–æ–º–æ–≥—É —É –≤–∏–±–æ—Ä—ñ —Ç–µ—Ö–Ω—ñ–∫–∏, —è–∫–∞ –∑–∞–¥–æ–≤–æ–ª—å–Ω–∏—Ç—å —É—Å—ñ –í–∞—à—ñ –ø–æ—Ç—Ä–µ–±–∏.\n\n<b>üì≤ –î–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∞–±–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –Ω–∞—à–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤ Telegram: @apple_seller_opt</b>", parse_mode='HTML')
    insert_userid(update.from_user.id)


@dp.message_handler(commands=['black_live_matter'])
async def welcome(message: types.Message):
    await do.msg.set()
    await bot.send_message(message.from_user.id, f'–í–≤–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–¥–æ –±—É–¥–µ—Ç —Ä–∞–∑–æ—Å–ª–∞—Ç—å:')


async def send_scheduled_message(user_id, message):
    await bot.send_message(user_id, message)


@dp.message_handler(state=do.msg)
async def input_symbol(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['msg'] = message.text
    for row in get_userids():
        await send_scheduled_message(user_id=row[0], message=data['msg'])
    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
    await state.finish()


scheduler = AsyncIOScheduler()

scheduler.start()


if __name__ == "__main__":
    print("ONLINE")
    executor.start_polling(dp, skip_updates=True)