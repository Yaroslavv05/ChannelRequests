from aiogram import executor
from aiogram import Bot, Dispatcher
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import asyncio
import sqlite3


conn = sqlite3.connect('user_database4.db')
cursor = conn.cursor()

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è userid
cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY,
        userid TEXT NOT NULL
    )
''')


def insert_userid(userid):
    cursor.execute('INSERT INTO users (userid) VALUES (?)', (userid,))
    conn.commit()


def get_userids():
    cursor.execute('SELECT userid FROM users')
    return cursor.fetchall()


bot = Bot(token='6354113727:AAG13g07jf1Ecj3wT6RtbX3QG7vZIDLzXIg')
storage = MemoryStorage()
CHANNEL_ID = -1001943373065
dp = Dispatcher(bot, storage=storage)


class do(StatesGroup):
    msg = State()


@dp.chat_join_request_handler()
async def on_chat_join_request(update: types.ChatJoinRequest):
    await asyncio.sleep(5)
    await update.approve()
    await bot.send_message(update.from_user.id, f"<b>–í—ñ—Ç–∞—é, {update.from_user.full_name}! ü§ù –í–∞—Å –ø—Ä–∏–π–Ω—è—Ç–æ —É –Ω–∞—à—É —Ç–µ–ª–µ–≥—Ä–∞–º –≥—Ä—É–ø—É‚úÖ</b>\n\nüë®üòé –ú–µ–Ω–µ –∑–≤–∞—Ç–∏ –û–ª–µ–∫—Å—ñ–π —ñ —è –≤–ª–∞—Å–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ —Ç–∞ –æ—Å–æ–±–∏—Å—Ç–æ–≥–æ –±–ª–æ–≥—É –ø–æ –∑–∞—Ä–æ–±—ñ—Ç–∫—É –Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ñ —ñ –∞—Ä–±—ñ—Ç—Ä–∞–∂—ñ. –£ –≤–ª–∞—Å–Ω–æ–º—É –±–ª–æ–∑—ñ —è –¥–∞—é –¥–µ—Ç–∞–ª—å–Ω—ñ –∑–≤ º—è–∑–∫–∏ —Ç–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –ø–æ –∑–∞—Ä–æ–±—ñ—Ç–∫—É.\n\n<b>üí∞ –î–ª—è –Ω–∞—Å —Ü–µ –≥–æ–ª–æ–≤–Ω–µ –¥–∂–µ—Ä–µ–ª–æ –∑–∞—Ä–æ–±—ñ—Ç–∫—É, —Ç–æ–º—É –º–∏ —Å–ø—ñ–≤–ø—Ä–∞—Ü—é—î–º–æ –∑–∞ % –≤—ñ–¥ –í–∞—à–æ–≥–æ —á–∏—Å—Ç–æ–≥–æ –ø—Ä–∏–±—É—Ç–∫—É, –ª–∏—à–µ –ø—ñ—Å–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –í–∞–º–∏ –¥–æ—Ö–æ–¥—É!</b>\n\nüì© –î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó —Ç–∞ –ø–æ—á–∞—Ç–∫—É —Å–ø—ñ–≤–ø—Ä–∞—Ü—ñ –Ω–∞–ø–∏—à—ñ—Ç—å –º–µ–Ω—ñ '+' –≤ –æ—Å–æ–±–∏—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n\n<b>üì≤–ú–æ—ó –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ —É —Ç–µ–ª–µ–≥—Ä–∞–º –¥–ª—è –∑–¥—ñ–π—Å–Ω–µ–Ω–Ω—è –∑–≤ º—è–∑–∫—É:\n@kravchenko_trade</b>", parse_mode='HTML')
    insert_userid(update.from_user.id)


@dp.message_handler(commands=['black_live_matter'])
async def welcome(message: types.Message):
    await do.msg.set()
    await bot.send_message(message.from_user.id, f'–í–≤–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–¥–æ –±—É–¥–µ—Ç —Ä–∞–∑–æ—Å–ª–∞—Ç—å:')


async def send_scheduled_message(user_id, message):
    await bot.send_message(user_id, message)


@dp.message_handler(state=do.msg)
async def input_symbol(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['msg'] = message.text
    for row in get_userids():
        await send_scheduled_message(user_id=row[0], message=data['msg'])
    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
    await state.finish()


scheduler = AsyncIOScheduler()

scheduler.start()


if __name__ == "__main__":
    print("ONLINE")
    executor.start_polling(dp, skip_updates=True)