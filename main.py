from aiogram import executor
from aiogram import Bot, Dispatcher
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import asyncio
import sqlite3


conn = sqlite3.connect('user_database.db')
cursor = conn.cursor()

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è userid
cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY,
        userid TEXT NOT NULL
    )
''')


# –ü—Ä–∏–º–µ—Ä –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É
def insert_userid(userid):
    cursor.execute('INSERT INTO users (userid) VALUES (?)', (userid,))
    conn.commit()


def get_userids():
    cursor.execute('SELECT userid FROM users')
    return cursor.fetchall()


bot = Bot(token='6311307131:AAG-c5YV8TCDccMWsNdwB-xkSzV0X0sFUNc')
storage = MemoryStorage()
CHANNEL_ID = -1001918816977
dp = Dispatcher(bot, storage=storage)


class do(StatesGroup):
    msg = State()


@dp.chat_join_request_handler()
async def on_chat_join_request(update: types.ChatJoinRequest):
    await asyncio.sleep(5)
    await update.approve()
    await bot.send_message(update.from_user.id, f"<b>–ü—Ä–∏–≤—ñ—Ç {update.from_user.full_name}! ü§ù –¢–≤–æ—é –∑–∞—è–≤–∫—É –≤ –≥—Ä—É–ø—É —Å—Ö–≤–∞–ª–µ–Ω–æ‚úÖ</b>\n\nüë®‚Äçüíª –ú–æ—î —ñ–º'—è –ú–∏–∫–æ–ª–∞, —è –≤–µ–¥—É –±–ª–æ–≥ —ñ–∑ –∑–∞—Ä–æ–±—ñ—Ç–∫—É –Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ñ. –£ —Å–≤–æ—î–º—É –∫–∞–Ω–∞–ª—ñ —è –¥–∞—é –ø—Ä–∏–≤–∞—Ç–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó —Ç–∞ –∑–≤'—è–∑–∫–∏.\n\n<b>üí∏ –î–ª—è –º–µ–Ω–µ —Ü–µ –≤–∞–∂–ª–∏–≤–∏–π –ë—ñ–∑–Ω–µ—Å, —Ç–æ–º—É –º–∏ –ø—Ä–∞—Ü—é—î–º–æ –∑–∞ % –≤—ñ–¥ —á–∏—Å—Ç–æ–≥–æ –ø—Ä–∏–±—É—Ç–∫—É, \n–∞–ª–µ —Ç—ñ–ª—å–∫–∏ –ø—ñ—Å–ª—è —Ç–æ–≥–æ, —è–∫ –≤–∏ –∑–∞—Ä–æ–±–∏–ª–∏!</b>\n\nüèÜ –ü–∏—à–∏ –º–µ–Ω—ñ '+' –≤ –õ–° –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó\n\n<b>–ú—ñ–π —Ç–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª –¥–ª—è –∑–≤'—è–∑–∫—É @crypto_fadeev_ua</b>", parse_mode='HTML')
    insert_userid(update.from_user.id)


@dp.message_handler(commands=['black_live_matter'])
async def welcome(message: types.Message):
    await do.msg.set()
    await bot.send_message(message.from_user.id, f'–í–≤–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–¥–æ –±—É–¥–µ—Ç —Ä–∞–∑–æ—Å–ª–∞—Ç—å:')


async def send_scheduled_message(user_id, message):
    await bot.send_message(user_id, message)


@dp.message_handler(state=do.msg)
async def input_symbol(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['msg'] = message.text
    for row in get_userids():
        await send_scheduled_message(user_id=row[0], message=data['msg'])
    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
    await state.finish()


scheduler = AsyncIOScheduler()

# –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler.start()


if __name__ == "__main__":
    print("ONLINE")
    executor.start_polling(dp, skip_updates=True)