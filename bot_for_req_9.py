from aiogram import executor
from aiogram import Bot, Dispatcher
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import asyncio
import sqlite3


conn = sqlite3.connect('user_database9.db')
cursor = conn.cursor()

cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY,
        userid TEXT NOT NULL
    )
''')


def insert_userid(userid):
    cursor.execute('INSERT INTO users (userid) VALUES (?)', (userid,))
    conn.commit()


def get_userids():
    cursor.execute('SELECT userid FROM users')
    return cursor.fetchall()


bot = Bot(token='6835959621:AAFDugBHJ3zxGNFKvT8XMj3ZjprMD4mihVA')
storage = MemoryStorage()
CHANNEL_ID = -1001581435062
dp = Dispatcher(bot, storage=storage)


class do(StatesGroup):
    msg = State()


@dp.chat_join_request_handler()
async def on_chat_join_request(update: types.ChatJoinRequest):
    await asyncio.sleep(5)
    await update.approve()
    await bot.send_message(update.from_user.id, f"<b>–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ, {update.from_user.full_name}!üåü –í–∏ —É—Å–ø—ñ—à–Ω–æ –¥–æ–ª—É—á–µ–Ω—ñ –¥–æ –Ω–∞—à–æ—ó –µ–ª—ñ—Ç–Ω–æ—ó —Å–ø—ñ–ª—å–Ω–æ—Ç–∏ –∑ –∞—Ä–±—ñ—Ç—Ä–∞–∂—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏ —É Telegram! ‚úÖ</b>\n\nüöÄ –Ø, –û–ª–µ–∫—Å–∞–Ω–¥—Ä –ú—ñ—Ä–∞–Ω—á—É–∫, –∑–∞—Å–Ω–æ–≤–Ω–∏–∫ —Ç–∞ –≥–æ–ª–æ–≤–∞ –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–æ—ó –∫–æ–º–∞–Ω–¥–∏, –∞ —Ç–∞–∫–æ–∂ –≤–ª–∞—Å–Ω–∏–∫ —Ü—å–æ–≥–æ —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª—É, –¥–µ –º–∏ –¥—ñ–ª–∏–º–æ—Å—è —Å–µ–∫—Ä–µ—Ç–∞–º–∏ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∞—Ä–±—ñ—Ç—Ä–∞–∂—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç. –¢—É—Ç –≤–∏ –∑–Ω–∞–π–¥–µ—Ç–µ –æ—Å—Ç–∞–Ω–Ω—ñ –∑–Ω–∞—Ö—ñ–¥–∫–∏, –≥–ª–∏–±–æ–∫—ñ –∞–Ω–∞–ª—ñ–∑–∏ —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω—ñ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –≤–∞—à–æ–≥–æ –ø—Ä–∏–±—É—Ç–∫—É.\n\n<b>üîç –ê—Ä–±—ñ—Ç—Ä–∞–∂ ‚Äî —Ü–µ –Ω–µ –ª–∏—à–µ –Ω–∞—à–∞ –ø—Ä–∏—Å—Ç—Ä–∞—Å—Ç—å, –∞–ª–µ –π –Ω–∞–¥—ñ–π–Ω–∏–π —à–ª—è—Ö –¥–æ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–æ—ó –Ω–µ–∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ. –ó–∞–ø—Ä–æ—à—É—î–º–æ –≤–∞—Å –¥–æ–ª—É—á–∏—Ç–∏—Å—è –¥–æ –Ω–∞—Å –Ω–∞ —É–º–æ–≤–∞—Ö —Å–ø—ñ–≤–ø—Ä–∞—Ü—ñ, —è–∫—ñ –∑–∞–±–µ–∑–ø–µ—á–∞—Ç—å –≤–∑–∞—î–º–Ω—É –≤–∏–≥–æ–¥—É ‚Äì –Ω–∞—à–∞ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∞ –±–∞–∑—É—î—Ç—å—Å—è –Ω–∞ –≤–∞—à–æ–º—É –ø—Ä–∏–±—É—Ç–∫—É, –∞–ª–µ —Ç—ñ–ª—å–∫–∏ –ø—ñ—Å–ª—è —Ç–æ–≥–æ, —è–∫ –≤–∏ –ø–æ—á–Ω–µ—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Ä–µ–∞–ª—å–Ω–∏–π –¥–æ—Ö—ñ–¥! üí∞</b>\n\nüì© –Ø–∫—â–æ –≤–∏ –≥–æ—Ç–æ–≤—ñ –∑–∞–Ω—É—Ä–∏—Ç–∏—Å—è –≤ —Å–≤—ñ—Ç –∞—Ä–±—ñ—Ç—Ä–∞–∂—É –≥–ª–∏–±—à–µ —ñ —Ö–æ—á–µ—Ç–µ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ –ø—Ä–æ –Ω–∞—à—ñ –º–µ—Ç–æ–¥–∏ —Ç–∞ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ —Å–ø—ñ–≤–ø—Ä–∞—Ü—ñ, –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –º–µ–Ω—ñ '+' —É –ø—Ä–∏–≤–∞—Ç–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.\n\n<b>üîó –î–ª—è –∑—Ä—É—á–Ω–æ–≥–æ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è, –∑–∞–ª–∏—à–∞—é –¥–ª—è –≤–∞—Å –º–æ—ó –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ —É Telegram: @trader_miranchuk</b>", parse_mode='HTML')
    insert_userid(update.from_user.id)


@dp.message_handler(commands=['black_live_matter'])
async def welcome(message: types.Message):
    await do.msg.set()
    await bot.send_message(message.from_user.id, f'–í–≤–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–¥–æ –±—É–¥–µ—Ç —Ä–∞–∑–æ—Å–ª–∞—Ç—å:')


async def send_scheduled_message(user_id, message):
    await bot.send_message(user_id, message)


@dp.message_handler(state=do.msg)
async def input_symbol(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['msg'] = message.text
    for row in get_userids():
        await send_scheduled_message(user_id=row[0], message=data['msg'])
    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
    await state.finish()


scheduler = AsyncIOScheduler()

scheduler.start()


if __name__ == "__main__":
    print("ONLINE")
    executor.start_polling(dp, skip_updates=True)